//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="CurrencyConversionSoap", Namespace="http://www.tempuri.com/")]
public partial class CurrencyConversion : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetCurrencyRatesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCurrencyConversionOperationCompleted;
    
    /// <remarks/>
    public CurrencyConversion() {
        this.Url = "http://localhost:60972/CurrencyConversion.asmx";
    }
    
    /// <remarks/>
    public event GetCurrencyRatesCompletedEventHandler GetCurrencyRatesCompleted;
    
    /// <remarks/>
    public event GetCurrencyConversionCompletedEventHandler GetCurrencyConversionCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tempuri.com/GetCurrencyRates", RequestNamespace="http://www.tempuri.com/", ResponseNamespace="http://www.tempuri.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CurrencyRate[] GetCurrencyRates() {
        object[] results = this.Invoke("GetCurrencyRates", new object[0]);
        return ((CurrencyRate[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCurrencyRates(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCurrencyRates", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public CurrencyRate[] EndGetCurrencyRates(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CurrencyRate[])(results[0]));
    }
    
    /// <remarks/>
    public void GetCurrencyRatesAsync() {
        this.GetCurrencyRatesAsync(null);
    }
    
    /// <remarks/>
    public void GetCurrencyRatesAsync(object userState) {
        if ((this.GetCurrencyRatesOperationCompleted == null)) {
            this.GetCurrencyRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyRatesOperationCompleted);
        }
        this.InvokeAsync("GetCurrencyRates", new object[0], this.GetCurrencyRatesOperationCompleted, userState);
    }
    
    private void OnGetCurrencyRatesOperationCompleted(object arg) {
        if ((this.GetCurrencyRatesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCurrencyRatesCompleted(this, new GetCurrencyRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tempuri.com/GetCurrencyConversion", RequestNamespace="http://www.tempuri.com/", ResponseNamespace="http://www.tempuri.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public double GetCurrencyConversion(string sourceCurrency, double amount, string destinationCurrency) {
        object[] results = this.Invoke("GetCurrencyConversion", new object[] {
                    sourceCurrency,
                    amount,
                    destinationCurrency});
        return ((double)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCurrencyConversion(string sourceCurrency, double amount, string destinationCurrency, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCurrencyConversion", new object[] {
                    sourceCurrency,
                    amount,
                    destinationCurrency}, callback, asyncState);
    }
    
    /// <remarks/>
    public double EndGetCurrencyConversion(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((double)(results[0]));
    }
    
    /// <remarks/>
    public void GetCurrencyConversionAsync(string sourceCurrency, double amount, string destinationCurrency) {
        this.GetCurrencyConversionAsync(sourceCurrency, amount, destinationCurrency, null);
    }
    
    /// <remarks/>
    public void GetCurrencyConversionAsync(string sourceCurrency, double amount, string destinationCurrency, object userState) {
        if ((this.GetCurrencyConversionOperationCompleted == null)) {
            this.GetCurrencyConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyConversionOperationCompleted);
        }
        this.InvokeAsync("GetCurrencyConversion", new object[] {
                    sourceCurrency,
                    amount,
                    destinationCurrency}, this.GetCurrencyConversionOperationCompleted, userState);
    }
    
    private void OnGetCurrencyConversionOperationCompleted(object arg) {
        if ((this.GetCurrencyConversionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCurrencyConversionCompleted(this, new GetCurrencyConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.tempuri.com/")]
public partial class CurrencyRate {
    
    private string currencyNameField;
    
    private double rateWrtDollarField;
    
    private string currencyCodeField;
    
    /// <remarks/>
    public string currencyName {
        get {
            return this.currencyNameField;
        }
        set {
            this.currencyNameField = value;
        }
    }
    
    /// <remarks/>
    public double rateWrtDollar {
        get {
            return this.rateWrtDollarField;
        }
        set {
            this.rateWrtDollarField = value;
        }
    }
    
    /// <remarks/>
    public string currencyCode {
        get {
            return this.currencyCodeField;
        }
        set {
            this.currencyCodeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetCurrencyRatesCompletedEventHandler(object sender, GetCurrencyRatesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCurrencyRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCurrencyRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CurrencyRate[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CurrencyRate[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetCurrencyConversionCompletedEventHandler(object sender, GetCurrencyConversionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCurrencyConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCurrencyConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public double Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((double)(this.results[0]));
        }
    }
}
